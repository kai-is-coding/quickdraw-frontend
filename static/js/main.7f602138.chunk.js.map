{"version":3,"sources":["components/Navigation.js","components/Home.js","components/PlayRooms.js","components/Login.js","components/SignUp.js","components/DrawPage.js","constants/index.js","Routes.js","serviceWorker.js","index.js"],"names":["Navigation","props","loggedInStatus","userDetails","username","to","onClick","axios","delete","withCredentials","then","res","handleLogout","history","push","catch","err","console","warn","Home","PlayRooms","state","rooms","handleClick","id","log","showRooms","className","map","room","key","title","users","user","get","setState","data","this","React","Component","Login","email","password","errors","handleChange","event","target","name","value","handleSubmit","preventDefault","post","logged_in","handleLogin","redirect","handleErrors","onSubmit","placeholder","type","onChange","SignUp","password_confirmation","status","DrawPage","width","window","innerWidth","height","innerHeight","color","inputMessage","receivedMessage","lines","draw","sendLine","clearCanvas","saveableCanvas","clear","sendMessage","handleMessageChange","playroom_id","match","params","cable","ActionCable","createConsumer","subscriptions","create","channel","connected","received","loadableCanvas","action","simulateDrawingLines","immediate","perform","message","undo","canvasWidth","canvasHeight","ref","canvasDraw","brushRadius","brushColor","catenaryColor","disabled","Routes","isLoggedIn","loginStatus","path","render","exact","component","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.7f602138.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\nconst Navigation = (props) => {\n  const handleClick = () => {\n    axios.delete('https://quickdraw-backend.herokuapp.com/logout', {withCredentials: true})\n    .then(res => {\n      props.handleLogout()\n      props.history.push('/')\n    })\n    .catch(err => console.warn('log out errors:', err))\n  }\n\n  // console.log(props);\n\n  return(\n    <div>\n      <nav>\n        {\n          !props.loggedInStatus\n          ?\n          <div>\n            <Link to='/login'>Login</Link>\n            <br/>\n            <Link to='/signup'>Sign Up</Link>\n          </div>\n          :\n          <div>\n            <h2>{ props.userDetails && props.userDetails.username}</h2>\n            <Link to='/' onClick={handleClick}>Log Out</Link>\n          </div>\n        }\n      </nav>\n    </div>\n  );\n};\nexport default Navigation;\n","import React from 'react';\n// import {Link} from 'react-router-dom';\n// import axios from 'axios';\n\nconst Home = () => {\n  return(\n    <div>\n      <nav>\n        <h1>Welcome to this site!</h1>\n      </nav>\n    </div>\n  );\n};\nexport default Home;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport '../css/PlayRooms.css'\n\nclass PlayRooms extends React.Component {\n\n  state = {\n    rooms: null\n  }\n\n  componentDidMount(){\n    axios.get(\n      `https://quickdraw-backend.herokuapp.com/playrooms`,{withCredentials: true})\n    .then( res => {\n      this.setState({ rooms: res.data });\n      console.log('rooms:',this.state.rooms[0]);\n    })\n    .catch(err => console.warn('playrooms errors: ', err));\n  }\n\n  handleClick = (id) => {\n    console.log('clicked!')\n    this.props.history.push(`/playrooms/${id}`)\n  }\n\n  showRooms = () => {\n    return(\n      <div className='playrooms-container'>\n        {this.state.rooms.map(room => {\n          return(\n            <div key={room.id} className='playrooms'>\n              {room.title}\n              { room.users ?\n                <div className='users-container'>\n                  {room.users.map(user => {\n                    return (\n                      <div key={user.id} className='users'>\n                        {user.username}\n                      </div>\n                    )\n                  })}\n                </div> :\n                null\n              }\n              <button className='start' onClick={() => this.handleClick(room.id)}>Start Game!</button>\n\n            </div>\n          );\n        })}\n      </div>\n    )\n  }\n\n\n\n  render(){\n    return(\n      <div>\n      {\n        this.props.loggedInStatus\n        ?\n        <div>\n          <h1>Select your PlayRoom!</h1>\n          {\n            this.state.rooms ?\n            this.showRooms()\n            :\n            null\n          }\n        </div>\n         :\n        <h2>Please <Link to='/login'>Login</Link> to select playroom!</h2>\n      }\n      </div>\n    );\n  } // render()\n\n}\n\nexport default PlayRooms;\n","import React from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\n\nexport default class Login extends React.Component{\n  state = {\n    email: '', // TODO: remove in prod!\n    password: '',\n    errors: ''\n  };\n\n  handleChange = (event) => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let user = {\n      email: this.state.email,\n      password: this.state.password\n    }\n\n    axios.post('https://quickdraw-backend.herokuapp.com/login', {user}, {withCredentials: true})\n    .then(res => {\n      if (res.data.logged_in) {\n        console.log(res.data)\n        this.props.handleLogin(res.data)\n        this.redirect()\n      } else {\n        this.setState({\n          errors: res.data.errors\n        })\n      }\n    })\n    .catch(err => console.warn('login errors:', err));\n  }\n\n  redirect = () => {\n    this.props.history.push('/playrooms')\n  }\n\n  handleErrors = () => {\n    return(\n      <div>\n        <ul>\n          {this.state.errors.map(err => {\n            return <li key={err}>{err}</li>\n          })}\n        </ul>\n      </div>\n    )\n  }\n\n  render(){\n    const {email, password} = this.state\n\n    return (\n      <div>\n        <h1>Login</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input placeholder=\"email\" type=\"text\" name=\"email\" value={email} onChange={this.handleChange}/>\n            <input placeholder=\"password\" type=\"password\" name=\"password\" value={password} onChange={this.handleChange}/>\n            <button placeholder=\"submit\" type=\"submit\">Log In</button>\n            <div>\n             or <Link to='/signup'>sign up</Link>\n            </div>\n          </form>\n          <div>\n            {\n              this.state.errors ? this.handleErrors() : null\n            }\n          </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport axios from 'axios';\n\nexport default class SignUp extends React.Component{\n  state = {\n    username: '',\n    email: '',\n    password: '',\n    password_confirmation: '',\n    errors: ''\n  };\n\n  handleChange = (event) => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let user = {\n      username: this.state.username,\n      email: this.state.email,\n      password: this.state.password,\n      password_confirmation: this.state.password_confirmation\n    }\n\n    axios.post('https://quickdraw-backend.herokuapp.com/users', {user}, {withCredentials: true})\n    .then(res => {\n      if (res.data.status === 'created') {\n        this.props.handleLogin(res.data)\n        this.redirect()\n      } else {\n        this.setState({\n          errors: res.data.errors\n        })\n      }\n    })\n    .catch(err => console.warn('signup errors:', err));\n  }\n\n  redirect = () => {\n    this.props.history.push('/playrooms')\n  }\n\n  handleErrors = () => {\n    return(\n      <div>\n        <ul>\n          {this.state.errors.map(err => {\n            return <li key={err}>{err}</li>\n          })}\n        </ul>\n      </div>\n    )\n  }\n\n  render(){\n    const {username, email, password, password_confirmation} = this.state\n\n    return (\n      <div>\n        <h1>Sign Up</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input placeholder=\"username\" type=\"text\" name=\"username\" value={username} onChange={this.handleChange}/>\n            <input placeholder=\"email\" type=\"text\" name=\"email\" value={email} onChange={this.handleChange}/>\n            <input placeholder=\"password\" type=\"password\" name=\"password\" value={password} onChange={this.handleChange}/>\n            <input placeholder=\"password confirmation\" type=\"password\" name=\"password_confirmation\" value={password_confirmation} onChange={this.handleChange}/>\n            <button placeholder=\"submit\" type=\"submit\">Sign Up</button>\n          </form>\n          <div>\n            {\n              this.state.errors ? this.handleErrors() : null\n            }\n          </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport '../css/DrawPage.css';\nimport CanvasDraw from 'react-canvas-draw';\n\nimport {API_WS_ROOT} from '../constants';\nimport ActionCable from 'actioncable';\n\n\n\n\nexport default class DrawPage extends React.Component{\n\n  state = {\n    width: window.innerWidth * 0.8,\n    height: window.innerHeight * 0.5,\n    color: '#fff',\n    room: null,\n    inputMessage: null,\n    receivedMessage: null\n  };\n\n  componentDidMount(){\n    const playroom_id = this.props.match.params.id;\n\n    axios.get(\n      `https://quickdraw-backend.herokuapp.com/playrooms/${playroom_id}`,{withCredentials: true})\n    .then(res => {\n      console.log(`you are in room ${playroom_id}`);\n      this.setState({room: res.data})\n      // console.log(this.state.room);\n    })\n    .catch(err => console.warn('playroom errors: ', err));\n\n    this.cable = ActionCable.createConsumer(API_WS_ROOT);\n    this.draw = this.cable.subscriptions.create(\n      {channel: 'DrawsChannel'},\n      {\n        connected: () => {\n          console.log('DrawsChannel WS CONNECTED!');\n        },\n        received: (data) => {\n          console.log('RECEIVED DrawsChannel DATA', data);\n          if (this.loadableCanvas && data.action === \"send_line\"){\n            this.loadableCanvas.clear();\n            this.loadableCanvas.simulateDrawingLines({lines: data.lines, immediate: true});\n          }\n          else if (data.action === \"send_message\") {\n            console.log('receivedMessage:', data.inputMessage);\n            this.setState({receivedMessage: data.inputMessage})\n          }\n        },\n\n        sendLine: function(lines){\n          this.perform('send_line', lines);\n        },\n\n        sendMessage: function(message){\n          this.perform('send_message', message)\n        }\n      }\n    );//this.draw\n  }//componentDidMount()\n\n  handleChange = (event) => {\n    // window.lines = event.lines;\n    // window.canvas = this.saveableCanvas\n    console.log('change', event.lines );\n    this.draw.sendLine({lines: event.lines});\n  }\n\n  clearCanvas = () => {\n    this.saveableCanvas.clear();\n    this.draw.sendLine({lines: []});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log('message submit:', this.state.inputMessage);\n    this.draw.sendMessage({inputMessage: this.state.inputMessage});\n  }\n\n  handleMessageChange = (event) => {\n    this.setState({inputMessage: event.target.value})\n  }\n\n\n  render(){\n    return(\n      <div>\n      {\n        this.props.loggedInStatus\n        ?\n        this.props.userDetails.draw ?\n        <div className='drawPanel-container'>\n          <div className='drawPanel-container-top'>\n            <h2>Draw here!</h2>\n            {\n              this.state.receivedMessage?\n              <div className='message-from-gusser'>\n                {this.state.receivedMessage}\n              </div>\n              :\n              null\n            }\n            <button onClick={() => {\n              this.clearCanvas();\n            }}>\n            Clear\n            </button>\n            <button onClick={() => {\n              this.saveableCanvas.undo();\n            }}>\n            Undo\n            </button>\n          </div>\n            <CanvasDraw className='drawPanel'\n              onChange={this.handleChange}\n              canvasWidth={this.state.width}\n              canvasHeight={this.state.height}\n\n              ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\n            />\n\n        </div>\n        :\n        <div>\n          <h3>Guess!</h3>\n          <CanvasDraw className='drawPanel'\n            canvasWidth={this.state.width}\n            canvasHeight={this.state.height}\n            brushRadius = {0}\n            brushColor = {this.state.color}\n            catenaryColor = {this.state.color}\n            disabled\n            ref={canvasDraw => (this.loadableCanvas = canvasDraw)}\n          />\n\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" placeholder=\"Type Your Answer Here!\" onChange={this.handleMessageChange}/>\n          <button type=\"submit\">Answer!</button>\n        </form>\n        </div>\n         :\n        <h2>Please <Link to='/login'>Login</Link> to continue draw!</h2>\n      }\n      </div>\n    );\n  }\n}\n","export const API_ROOT = 'http://quickdraw-backend.herokuapp.com';\n// export const API_ROOT = 'http://localhost:3001';\nexport const API_WS_ROOT = 'ws://quickdraw-backend.herokuapp.com/cable';\n// export const API_WS_ROOT = 'ws://localhost:3001/cable';\nexport const HEADERS = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n","import React from 'react';\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport Navigation from './components/Navigation';\nimport Home from './components/Home';\nimport PlayRooms from './components/PlayRooms';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport DrawPage from './components/DrawPage';\n\n// import {ActionCableProvider} from 'react-actioncable-provider';\n// import {API_WS_ROOT} from './constants';\n\n\nexport default class Routes extends React.Component {\n  // maintain login status data\n  state = {\n    isLoggedIn: false,\n    user: {}\n  };\n\n  // call loginStatus() when first load\n  componentDidMount(){\n    this.loginStatus()\n  }\n\n  // data received from backend server\n  handleLogin = (data) => {\n    this.setState({\n      isLoggedIn: true,\n      user: data.user\n    });\n    // console.log(this.state.user);\n  }\n\n  handleLogout = () => {\n    this.setState({\n      isLoggedIn: false,\n      user: {}\n    })\n  }\n\n  loginStatus = () => {\n    // withCredentials: true is the key point!!\n    // it allows out rails server to set and read the cookie on the front end\n    axios.get('https://quickdraw-backend.herokuapp.com/logged_in', {withCredentials: true})\n    .then(res => {\n      if (res.data.logged_in) {\n        this.handleLogin(res.data)\n      } else {\n        this.handleLogout()\n      }\n    })\n    .catch(err => console.warn('api errors:', err));\n  }\n  render (){\n    return (\n      <div>\n      <Router>\n        <h1>Quick Draw</h1>\n\n        <Link to='/'>Home</Link> <br/>\n        <Link to='/playrooms'>PlayRooms</Link>\n        <Route path=\"/\" render={props => (\n            <Navigation\n              {...props}\n              handleLogout={this.handleLogout}\n              loggedInStatus = {this.state.isLoggedIn}\n              userDetails = {this.state.user}\n            />\n        )} />\n        <hr/>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/playrooms\" render={\n              props => (<PlayRooms {...props} handleLogin={this.handleLogin} loggedInStatus = {this.state.isLoggedIn}/>)\n            }/>\n            <Route exact path=\"/login\" render={\n              props => (<Login {...props} handleLogin={this.handleLogin} loggedInStatus = {this.state.isLoggedIn}/>)\n            }/>\n            <Route exact path=\"/signup\" render={\n              props => (<SignUp {...props} handleLogin={this.handleLogin} loggedInStatus = {this.state.isLoggedIn}/>)\n            }/>\n            <Route exact path=\"/playrooms/:id\" render={\n              props => (<DrawPage {...props} handleLogin={this.handleLogin} loggedInStatus = {this.state.isLoggedIn} userDetails = {this.state.user} /> )\n            }/>\n          </Switch>\n        </div>\n      </Router>\n      </div>\n    );\n  }\n}\n\n// exact path=\"/playrooms/:id\" render={\n//    props => (\n//      <ActionCableProvider url={API_WS_ROOT}>\n//        <DrawPage {...props} handleLogin={this.handleLogin} loggedInStatus = {this.state.isLoggedIn}/>\n//      </ActionCableProvider>\n//    )\n// }/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Routes/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}